import asyncio
import logging
import config
from aiogram import Bot, Dispatcher, types
from aiogram.utils.markdown import text, bold
from aiogram.types import ParseMode
from aiogram.types.message import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pathlib import Path

import os
from langchain.document_loaders import TextLoader

# used to create the retriever
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings

# used to create the retriever
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings

# used to create the retrieval tool
from langchain.agents import tool

# used to create the memory
from langchain.memory import ConversationBufferMemory

# used to create the agent executor
from langchain.chat_models import ChatOpenAI
from langchain.agents import AgentExecutor

# used to create the prompt template
from langchain.agents.openai_functions_agent.base import OpenAIFunctionsAgent
from langchain.schema import SystemMessage
from langchain.prompts import MessagesPlaceholder

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)

# retriever part
os.environ["OPENAI_API_KEY"] = config.openai_api_key
# This is needed for both the memory and the prompt
memory_key = "history"
loader = TextLoader(Path("data/raw_data/faq.txt"), encoding='utf8')
data = loader.load()
text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
texts = text_splitter.split_documents(data)
embeddings = OpenAIEmbeddings()
db = FAISS.from_documents(texts, embeddings)
retriever = db.as_retriever()
@tool
def tool(query):
    "Searches and returns documents regarding the llm powered autonomous agents blog"
    docs = retriever.get_relevant_documents(query)
    return docs

tools = [tool]
memory = ConversationBufferMemory(memory_key=memory_key, return_messages=True)
system_message = SystemMessage(
        content=(
            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ê—à–∞–Ω–∞. –°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
            "–î–ª—è —ç—Ç–æ–≥–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ê—à–∞–Ω–∞."
        )
)
prompt = OpenAIFunctionsAgent.create_prompt(
        system_message=system_message,
        extra_prompt_messages=[MessagesPlaceholder(variable_name=memory_key)]
    )
llm = ChatOpenAI(temperature = 0)
agent = OpenAIFunctionsAgent(llm=llm, tools=tools, prompt=prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, memory=memory, verbose=True)


token = config.token
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
TEL_REGEXP = r'^\+79[\d]{9}$'

def make_keyboard(menu):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_point in menu:
        keyboard.add(menu_point)
    return keyboard

class UserStates(StatesGroup):
    person = State()
    ask_tel = State()
    tel = State()
    name = State()
    ready = State()
    
@dp.message_handler(lambda message: message.text == "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å", state=UserStates.person)
@dp.message_handler(lambda message: message.text == "–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å", state=UserStates.person)
async def cmd_init(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.ask_tel.state)
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    msg = text("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79–•–•–•–•–•–•–•–•–•.\n\
–û—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.auchan.ru/privacy-policy/")
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(filters.Regexp(TEL_REGEXP), state=UserStates.ask_tel)
async def cmd_save_person(message: types.Message, state: FSMContext):
    await state.update_data(telephone=message.text.lower())
    await state.set_state(UserStates.tel.state)
    menu_list = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]
    msg = text("–ü—Ä–æ–¥–æ–ª–∂–∞—è –¥–∏–∞–ª–æ–≥, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö: https://www.auchan.ru/pl/\n\
–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö —Å–∫–∏–¥–∫–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ \"–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω\"")
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=UserStates.tel)
@dp.message_handler(lambda message: message.text == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", state=UserStates.tel)
async def cmd_ask_name(message: types.Message, state: FSMContext):
    msg = text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(UserStates.name.state)
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=UserStates.name)
async def cmd_save_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    msg = text("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ", message.text,"ü§ó")
    await state.set_state(UserStates.ready.state)
    menu_list = ["–ö–∞—Ä—Ç–∞ –ê–®–ê–ù", "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", "–ê–∫—Ü–∏–∏", "–ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞", "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(commands=['start'], state='*')
@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state='*')
async def cmd_main_menu(message: types.Message, state: FSMContext):
    if await state.get_state() != UserStates.ready.state:
        await state.set_state(UserStates.person.state)

    menu_list = ["–ö–∞—Ä—Ç–∞ –ê–®–ê–ù", "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", "–ê–∫—Ü–∏–∏", "–ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞", "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
    msg = text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤–∞–º –ø–æ–º–æ–≥—É ü§ó")
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))



@dp.message_handler(lambda message: message.text == "–ö–∞—Ä—Ç–∞ –ê–®–ê–ù", state="*")
async def cmd_card(message: types.Message, state: FSMContext):
    msg = text('üí≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É –ê–®–ê–ù –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ—Ä–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤!\
–í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª–∞–º–∏ –¥–æ 70% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–Ω–∏–∫–∞–º–∏\n\
–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –¥–æ 100% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –±–∞–ª–ª–∞–º–∏! –ò –≤—Å—ë –ø–æ —á–µ—Å—Ç–Ω–æ–º—É –∫—É—Ä—Å—É: 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å!\
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.auchan.ru/karta-auchan/\n\
–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? üòâ', sep='\n')
    menu_list = ["–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å", "–î–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–ª–∞–º–∏", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))



@dp.message_handler(lambda message: message.text == "–ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å", state=UserStates.ready)
async def cmd_get_balance(message: types.Message, state: FSMContext):
    #–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–¥
    msg = text('üí≥  –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞. –°–µ–π—á–∞—Å –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ: \nüü° 0 –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ \nüî¥ 0 —ç–∫—Å–ø—Ä–µ—Å—Å-–±–∞–ª–ª–æ–≤ \nüé´ 0 –∫—É–ø–æ–Ω–æ–≤', sep='\n')
    menu_list = ["–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Å—É–º–º–æ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", state=UserStates.ready)
async def cmd_call_op(message: types.Message, state: FSMContext):
    #–ù–£–ñ–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    msg = text('–ú–∏–Ω—É—Ç—É, —É–∂–µ –∏—â—É —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Å—É–º–º–æ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", state='*')
@dp.message_handler(lambda message: message.text == "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å", state='*')
@dp.message_handler(lambda message: message.text == "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å", state='*')
async def cmd_connect_op(message: types.Message, state: FSMContext):
    #–ù–£–ñ–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    msg = text('–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))
    




@dp.message_handler(lambda message: message.text == "–î–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–ª–∞–º–∏", state='*')
async def cmd_points(message: types.Message, state: FSMContext):
    msg = text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å:', sep='\n')
    menu_list = ["–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã", "–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã", state='*')
async def cmd_gain_points(message: types.Message, state: FSMContext):
    msg = text('–ü–æ–ª—É—á–∞–π—Ç–µ –∫–µ—à–±—ç–∫ –±–∞–ª–ª–∞–º–∏ –¥–æ 70% –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–Ω–∏–∫–∞–º–∏.\
                –î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ –∫–∞—Å—Å–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.\n\
                –ê –µ—â–µ –¥–∞—Ä–∏–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–µ—à–±—ç–∫ 10% –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –∏ –ø–æ—Å–ª–µ –î–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n\
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ:  https://www.auchan.ru/personal-settings/loyalty/my-suggestions/darim-bally-na-den-rozhdeniya/', sep='\n')
    menu_list = ["–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", state='*')
async def cmd_spend_points(message: types.Message, state: FSMContext):
    msg = text('–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –¥–æ 100% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫ –±–∞–ª–ª–∞–º–∏ –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ê–®–ê–ù.\n\
                –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É –ê–®–ê–ù.\n\
                –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–ª—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n\
                –ë–∞–ª–ª—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è:\n\
                - –ù–∞ —Ç–∞–±–∞–∫ –∏ —Ç–∞–±–∞—á–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é;\n\
                - –ù–∞ –∞–ª–∫–æ–≥–æ–ª—å–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é;\n\
                - –ù–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç –ê–®–ê–ù;\n\
                - –ù–∞ –ø–æ–∫—É–ø–∫—É –∫–∞—Ä—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ê–®–ê–ù.', sep='\n')
    menu_list = ["–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", state='*')
async def cmd_ss(message: types.Message, state: FSMContext):
    msg = text('–ü–æ –±—É–¥–Ω—è–º —Å 7:00 –¥–æ 12:00 –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫ 7% –±–∞–ª–ª–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º!\n\
                –ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫?\n\
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É –ê–®–ê–ù\n\
                –ü–æ–ª—É—á–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã –ê–®–ê–ù\n\
                –ü–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ä—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏\n\
                –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å https://www.auchan.ru/karta-auchan/pravila-programmy/, –ø—É–Ω–∫—Ç 4.2.1.', sep='\n')
    menu_list = ["–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", state=UserStates.ready)
async def cmd_get_ss(message: types.Message, state: FSMContext):
    msg = text('–ö–æ–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è?\n\
               –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º, –æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≥—Ä–∞–∂–¥–∞–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—å–≥–æ—Ç–∞—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ü—Ä–∞–≤–∏–ª–∞—Ö –ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: https://www.auchan.ru/karta-auchan/pravila-programmy/?punkt=42\n\
                –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å—Ç—å –ª–∏ —É –º–µ–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å?\n\
                –ù–∞ —Å–∞–π—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\
                https://www.auchan.ru/personal-settings/my-profile/\n\
                –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å?\n\
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø—Ä–∞–≤–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—å–≥–æ—Ç—ã.\
                –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω-–∫–æ–ø–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', sep='\n')
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã", state='*')
async def cmd_card_reg(message: types.Message, state: FSMContext):
    msg = text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã', sep='\n')
    menu_list = ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã", state=UserStates.ready)
async def cmd_plastic_card_reg(message: types.Message, state: FSMContext):
    data = await state.get_data()
    msg = text(data['name'],', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –ê–®–ê–ù', sep='\n')
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", state=UserStates.ready)
async def cmd_virt_card_reg(message: types.Message, state: FSMContext):

    data = await state.get_data()
    msg = text(data['name'],', –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ê–®–ê–ù, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ú–æ–π –ê–®–ê–ù –ø–æ —Å—Å—ã–ª–∫–µ: https://mobile.auchan.ru/newapp/ \
               –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ö–∞—Ä—Ç–∞ –ê—à–∞–Ω" –Ω–∞ —Å–∞–π—Ç–µ https://www.auchan.ru/personal-settings/loyalty/my-card/\n', sep='\n')
    menu_list = ["–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(lambda message: message.text == "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", state='*')
async def cmd_purchases(message: types.Message, state: FSMContext):
    msg = text('–ü–æ–∫–∞ —è –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å —Ç–æ–ª—å–∫–æ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–∫–∞–∑–∞–º. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ê–®–ê–ù –∏ –ê–¢–ê–ö –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ  https://www.auchan.ru/personal-settings/my-purchases/\n\
–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', sep='\n')
    menu_list = ["–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–í–æ–∑–≤—Ä–∞—Ç—ã", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", state=UserStates.ready)
async def cmd_orders(message: types.Message, state: FSMContext):
    #–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–¥, –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ 
    msg = text('–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', sep='\n')
    menu_list = ["–í–æ–∑–≤—Ä–∞—Ç—ã", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–í–æ–∑–≤—Ä–∞—Ç—ã", state='*')
async def cmd_returns(message: types.Message, state: FSMContext):
    msg = text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é', sep='\n')
    menu_list = ["–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))
 
@dp.message_handler(lambda message: message.text == "–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞", state='*')
async def cmd_return_terms(message: types.Message, state: FSMContext):
    msg = text('–í–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä ‚Äî –õ–ï–ì–ö–û!\
                –í –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ê–®–ê–ù –∏ –ê–¢–ê–ö:\
                –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤ –≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ª—é–±–æ–π –≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –Ω–∞ –ü—É–Ω–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.\
                –ö—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–µ? –í–µ—Ä–Ω–∏—Ç–µ –≤ —Ç–æ–º –∂–µ –º–∞–≥–∞–∑–∏–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–∞—Å—Å.\
                –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —á–µ–∫ –∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å –æ–ø–ª–∞—Ç–∞\
                –í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê—à–∞–Ω.—Ä—É:\
                –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–¥–µ—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –ø—É–Ω–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–π –≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –ê–®–ê–ù.\
                –û–±—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å: https://www.auchan.ru/help/service/vozvrat/', sep='\n')
    menu_list = ["–í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))
 
@dp.message_handler(lambda message: message.text == "–ê–∫—Ü–∏–∏", state='*')
async def cmd_promotions(message: types.Message, state: FSMContext):
    msg = text('–¢—ã—Å—è—á–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–∞—Å –ø–æ —Å—É–ø–µ—Ä—Ü–µ–Ω–∞–º https://www.auchan.ru/superceny/', sep='\n')
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(lambda message: message.text == "–ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞", state='*')
async def cmd_shop_search(message: types.Message, state: FSMContext):
    msg = text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±', sep='\n')
    menu_list = ["–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard = make_keyboard(menu_list)
    keyboard['keyboard'][0] = [{"text": "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", "request_location": True}]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.message_handler(content_types=['location'], state='*')
async def cmd_shop_search_by_geo(message: types.Message, state: FSMContext):
    #–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–¥, –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    lat = message.location.latitude
    lon = message.location.longitude
    msg = text(f'–ê–®–ê–ù –æ–∫–æ–ª–æ —Ç–æ—á–∫–∏ ({lon}, {lat}), https://yandex.ru/maps/?ll={lon},{lat}&pt={lon},{lat}&z=12&l=map', sep='\n')
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


@dp.message_handler(state=UserStates.ask_tel)
async def cmd_check_person(message: types.Message, state: FSMContext):
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    msg = text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))

@dp.message_handler(content_types=ContentType.ANY, state='*')
async def unknown_message(message: types.Message, state: FSMContext):
    menu_list = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    result = agent_executor({"input": message.text})
    msg = text(result["output"])
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=make_keyboard(menu_list))


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())