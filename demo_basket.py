import streamlit as st
import pandas as pd
from pathlib import Path
from src.consultants.recipe_consultant import RecipeConsultant
from data.raw_data.raw_products import products_row
import random
import re

from dataclasses import dataclass

n_cards_per_row = 3
smart_consultant = RecipeConsultant()
initial_massage = [{"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–∏—è, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –µ–¥—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ê—à–∞–Ω. –ö–∞–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É –≤–∞—Å –≤ –µ–¥–µ? –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"}]

st.sidebar.title("–ü–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")

chat_container = st.sidebar.container()


@st.cache_data
def read_csv(path):
    df = pd.read_csv(path, index_col=0)

    return df

recipe_db = read_csv(Path("data/raw_data/recepies.csv"))

@dataclass
class Product:
    name: str
    photo_link: str

    def render(self, add_button="add"):
        st.write(self.name)
        st.image(self.photo_link)
        if add_button == "add":
            st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", on_click=add_to_backet, args=(self, True), key=self.name+"_add_button")
        if add_button == "delete":
            st.button("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", on_click=delete_from_backet, args=(self, True), key=self.name+"_delete_button")

all_products = [Product(name, link) for name, link in products_row]


def delete_from_backet(product, is_update_advice=False):
    st.session_state["basket"].remove(product)
    if is_update_advice:
        update_advice()

def add_to_backet(product, is_update_advice=False):
    if product.name not in [i.name for i in st.session_state["basket"]]:
        st.session_state["basket"].append(product)
        if is_update_advice:
            update_advice()

def update_advice():

    try: 
        ingridients, recipe_name, recipe = find_recipe(st.session_state["basket"])

        message = f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {', '.join([i.name for i in st.session_state['basket']])} –≤ –∫–æ—Ä–∑–∏–Ω—É. \n \
                    –ü—Ä–∏–≥–æ—Ç–æ–≤—å –∏–∑ —ç—Ç–æ–≥–æ {recipe_name}! \n"
        
        link = "https://i.artfile.ru/2880x1800_954014_[www.ArtFile.ru].jpg" # –ó–∞–≥–ª—É—à–∫–∞
    except:
        message = "–£ –Ω–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, –ø—Ä–æ—Å—Ç–∏—Ç–µ üòû. \n\n –ú—ã —á–∏–Ω–∏–º"

        ingridients, recipe = "", ""
        
        link = "https://i.yapx.cc/VakAF.gif"

    st.session_state["advice"] = (message, ingridients, recipe, link)

def show_recipe(recipe, ingridients):

    st.chat_message("assistant").write(re.sub(r"\d[.] ", "\n {}) ", recipe).format(*range(1, 100)))

    ask_to_add_to_basket(ingridients, False)


def find_recipe(products: list):
  
    products = [i.name.lower().replace(" ", "_") for i in products]

    data = recipe_db

    spice_df = pd.DataFrame(dict((spice, data.composition.str.contains(spice, re.IGNORECASE)) for spice in products))
    selection = spice_df.query('|'.join(products))
    index_selection = random.choice(selection.index)
    name = data.name[index_selection]
    recipe = data.–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏[index_selection]
    compositions = data.composition[index_selection]
    link = data.source[index_selection]

    return eval(compositions), name, recipe



def add_message(role: str, content: str) -> None:
    st.session_state["messages"].append({"role": role, "content": content})

def display_chat(chat: list):

    for msg in chat:
        st.chat_message(msg["role"]).write(msg["content"])
    
    if "ask_chat_bot" in st.session_state:
        if st.session_state["ask_chat_bot"]:
            with st.spinner("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç"):
                answer = smart_consultant.get_answer(initial_massage + st.session_state["messages"])
            add_message(role = "assistant", content = answer)
            st.chat_message("assistant").write(answer)

            with st.spinner("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç"):
                ingridients = smart_consultant.find_ingridients(answer) 

            ask_to_add_to_basket(ingridients.split(", "))                    


            st.session_state["ask_chat_bot"] = False


def ask_to_add_to_basket(ingridients: list, is_add_message=True):
    
    ingridients_to_advice = []

    for product in all_products:
        for i in ingridients:
            if product.name.lower() == i.lower() and product.name.lower() not in [i.name.lower() for i in st.session_state["basket"]]:
                ingridients_to_advice.append(product)

    advice = ("–î–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É: \n\n" + 
              "\n\n".join([f" ‚úÖ {i.name}" for i in ingridients_to_advice]) + " \n\n " + 
              "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?")
    
    st.chat_message("assistant").write(advice)
    if is_add_message:
        add_message("assistant", advice)

    make_design(ingridients_to_advice)    
    

def make_design(ingridients_to_advice):
    col1, col2 = st.columns(2)
    
    col1.button("–î–∞", on_click=add_to_backet_list, args=(ingridients_to_advice, ))
    col2.button("–ù–µ—Ç")

def add_to_backet_list(products):
    for p in products:
        add_to_backet(p, is_update_advice=True)


def init_session_state():
    if "messages" not in st.session_state:
        st.session_state["messages"] = []

    if "basket" not in st.session_state:
        st.session_state["basket"] = []

def update_chat():
    if "chat_input" in st.session_state:
        if st.session_state["chat_input"]:
            add_message(role = "user", content = st.session_state["chat_input"])
            st.session_state["ask_chat_bot"] = True
            
        st.session_state["chat_input"] = ""

def display_sidebar():
    with st.sidebar:

        st.text_input("–û—Ç–≤–µ—Ç", label_visibility='hidden', placeholder="–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ —É–∂–∏–Ω", key="chat_input")

        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state["messages"] = []

        with chat_container:
            display_chat(st.session_state["messages"][-10:])

def display_basket():
    with st.expander("–ö–æ—Ä–∑–∏–Ω–∞"):
        st.title("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")

        display_products(st.session_state["basket"], add_button="delete")

def display_advices():
    with st.expander("–°–æ–≤–µ—Ç—ã –ø–æ –∫–æ—Ä–∑–∏–Ω–µ", expanded=True):
        st.title("–°–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã")

        if "advice" in st.session_state:

            message, ingridients, recipe, link = st.session_state["advice"]

            st.chat_message("assistant").write(message)

            st.image(link)

            if recipe:

                st.chat_message("assistant").write("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç?")

                col1, col2 = st.columns(2)

                if col1.button("–î–∞", key="67890"):
                    show_recipe(recipe, ingridients)
                col2.button("–ù–µ—Ç", key="7890987")
        else:
            st.chat_message("assistant").write("–î–æ–±–∞–≤—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã")


def display_market():
    st.title("–¢–æ–≤–∞—Ä—ã")

    text_to_search = st.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')

    if text_to_search:
        products_to_show = [i for i in all_products if text_to_search.lower() in i.name.lower()]
    else:
        products_to_show = all_products

    display_products(products_to_show, add_button="add")


def display_products(products: list, add_button = "add"):
    

    for i, product in enumerate(products):

        n_col = i%n_cards_per_row

        if n_col == 0:
            st.write("---")
            cols = st.columns(n_cards_per_row)

        with cols[n_col]:
            product.render(add_button=add_button)



if __name__ == "__main__":
    init_session_state()

    update_chat()

    display_sidebar()

    display_basket()

    display_advices()

    display_market()
